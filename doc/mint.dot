digraph {
    node [shape = box; style = "rounded, filled"; fillcolor = "#F5F5F5"; fontname = "Arial"; fontsize = 12;];
    edge [fontname = "Arial"; fontsize = 10;];
    
    start [label = "Start";shape = "ellipse";style = "filled";fillcolor = "#90EE90";];
    
    start -> minterCheck [label = "Call function: mint"; fontsize = 10;];
    
	minterCheck [label = "Admin?";shape = "diamond";style = "filled";fillcolor = "#FFE4B5";];
	minterCheck -> checkTo [label = "Yes"; fontsize = 10;];
	minterCheck -> revertNotMinter [label = "No"; fontsize = 10;];
    revertNotMinter [label = "NotMinter";shape = "box";style = "rounded,filled";fillcolor = "red";];
	revertNotMinter -> end;

    checkTo [label = "'to' address is\n not null?";shape = "diamond";style = "filled";fillcolor = "#FFE4B5";];
    checkAmount [label = "Amount is \npositive?";shape = "diamond";style = "filled";fillcolor = "#FFE4B5";];
    checkAvailableMint [label = "There are available\nmintable tokens?";shape = "diamond";style = "filled";fillcolor = "#FFE4B5";];
    checkAmountExceedsMintable [label = "Amount exceeds\navailable mintable tokens?";shape = "diamond";style = "filled";fillcolor = "#FFE4B5";];
    assertStatement [label = "Assert statement";shape = "box";style = "rounded,filled";fillcolor = "gray";];
    mintTokens [label = "Mint tokens";style = "filled";fillcolor = "greenyellow";];
    decreaseAvailableMint [label = "Decrease available mint\n by amount";style = "filled";fillcolor = "greenyellow";];
    emitEvent [label = "Emit Mint event";shape = "box";style = "rounded,filled";fillcolor = "turquoise";];
    end [label = "End";shape = "ellipse";style = "filled";fillcolor = "#90EE90";];
    
    revertNullAddress [label = "NullAddress";shape = "box";style = "rounded,filled";fillcolor = "red";];
    revertNotPositiveAmount [label = "NotPositiveAmount";shape = "box";style = "rounded,filled";fillcolor = "red";];
    revertNotAvailableMints [label = "NotAvailableMints";shape = "box";style = "rounded,filled";fillcolor = "red";];
    revertAmountExceedsMintable [label = "AmountExceedsMintable";shape = "box";style = "rounded,filled";fillcolor = "red";];
    
    checkTo -> checkAmount [label = "Yes"; fontsize = 10;];
    checkTo -> revertNullAddress [label = "No"; fontsize = 10;];
    revertNullAddress -> end;
    
    checkAmount -> checkAvailableMint [label = "Yes"; fontsize = 10;];
    checkAmount -> revertNotPositiveAmount [label = "No"; fontsize = 10;];
    revertNotPositiveAmount -> end;
    
    checkAvailableMint -> checkAmountExceedsMintable [label = "Yes"; fontsize = 10;];
    checkAvailableMint -> revertNotAvailableMints [label = "No"; fontsize = 10;];
    revertNotAvailableMints -> end;
    
    checkAmountExceedsMintable -> revertAmountExceedsMintable [label = "No"; fontsize = 10;];
    checkAmountExceedsMintable -> assertStatement [label = "Yes"; fontsize = 10;];
    revertAmountExceedsMintable -> end;
    
    assertStatement -> mintTokens;
    assertStatement -> end [label = "Assertion Failed"; fontsize = 10; fontcolor = "#FF0000";];
    
    mintTokens -> decreaseAvailableMint;
    decreaseAvailableMint -> emitEvent;
    emitEvent -> end;
}